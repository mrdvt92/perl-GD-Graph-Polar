.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GD::Graph::Polar 3"
.TH GD::Graph::Polar 3 "2022-09-20" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GD::Graph::Polar \- Perl package to create polar graphs using GD package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use GD::Graph::Polar;
\&  my $obj=GD::Graph::Polar\->new(size=>480, radius=>100);
\&  $obj\->addPoint        (50=>25);
\&  $obj\->addPoint_rad    (50=>3.1415);
\&  $obj\->addGeoPoint     (75=>25);
\&  $obj\->addGeoPoint_rad (75=>3.1415);
\&  $obj\->addLine($r0=>$t0, $r1=>$t1);
\&  $obj\->addLine_rad($r0=>$t0, $r1=>$t1);
\&  $obj\->addGeoLine($r0=>$t0, $r1=>$t1);
\&  $obj\->addGeoLine_rad($r0=>$t0, $r1=>$t1);
\&  $obj\->addArc($r0=>$t0, $r1=>$t1);
\&  $obj\->addArc_rad($r0=>$t0, $r1=>$t1);
\&  $obj\->addGeoArc($r0=>$t0, $r1=>$t1);
\&  $obj\->addGeoArc_rad($r0=>$t0, $r1=>$t1);
\&  $obj\->addString($r=>$t, "Hello World!");
\&  $obj\->addString_rad($r=>$t, "Hello World!");
\&  $obj\->addGeoString($r=>$t, "Hello World!");
\&  $obj\->addGeoString_rad($r=>$t, "Hello World!");
\&  $obj\->font(gdSmallFont);  #sets the current font from GD exports
\&  $obj\->color("blue");      #sets the current color from Graphics::ColorNames
\&  $obj\->color([0,0,0]);     #sets the current color [red,green,blue]
\&  print $obj\->draw;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is a wrapper around \s-1GD\s0 to produce polar graphs with an easy interface.  I use this package to display \s-1GPS\s0 satellites on a graph with data from the Net::GPSD3 package.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
The new constructor.
.PP
.Vb 7
\&  my $obj = GD::Graph::Polar\->new(           #default values
\&                                  size    => 480,    #width and height in pixels
\&                                  radius  => 1,      #scale of the radius
\&                                  ticks   => 10,     #number of major ticks
\&                                  border  => 2,      #pixel border around graph
\&                                  rgbfile => "/usr/X11R6/lib/X11/rgb.txt"
\&                                 );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "addPoint"
.IX Subsection "addPoint"
Method to add a point to the graph.
.PP
.Vb 1
\&  $obj\->addPoint(50=>25);
.Ve
.SS "addPoint_rad"
.IX Subsection "addPoint_rad"
Method to add a point to the graph.
.PP
.Vb 1
\&  $obj\->addPoint_rad(50=>3.1415);
.Ve
.SS "addGeoPoint"
.IX Subsection "addGeoPoint"
Method to add a point to the graph.
.PP
.Vb 1
\&  $obj\->addGeoPoint(75=>25);
.Ve
.SS "addGeoPoint_rad"
.IX Subsection "addGeoPoint_rad"
Method to add a point to the graph.
.PP
.Vb 1
\&  $obj\->addGeoPoint_rad(75=>3.1415);
.Ve
.SS "addLine"
.IX Subsection "addLine"
Method to add a line to the graph.
.PP
.Vb 1
\&  $obj\->addLine(50=>25, 75=>35);
.Ve
.SS "addLine_rad"
.IX Subsection "addLine_rad"
Method to add a line to the graph.
.PP
.Vb 1
\&  $obj\->addLine_rad(50=>3.14, 75=>3.45);
.Ve
.SS "addGeoLine"
.IX Subsection "addGeoLine"
Method to add a line to the graph.
.PP
.Vb 1
\&  $obj\->addGeoLine(50=>25, 75=>35);
.Ve
.SS "addGeoLine_rad"
.IX Subsection "addGeoLine_rad"
Method to add a line to the graph.
.PP
.Vb 1
\&  $obj\->addGeoLine_rad(50=>3.14, 75=>3.45);
.Ve
.SS "addArc"
.IX Subsection "addArc"
Method to add an arc to the graph.
.PP
.Vb 1
\&  $obj\->addArc(50=>25, 75=>35);
.Ve
.SS "addArc_rad"
.IX Subsection "addArc_rad"
Method to add an arc to the graph.
.PP
.Vb 1
\&  $obj\->addArc_rad(50=>3.14, 75=>3.45);
.Ve
.SS "addGeoArc"
.IX Subsection "addGeoArc"
Method to add an arc to the graph.
.PP
.Vb 1
\&  $obj\->addGeoArc(50=>25, 75=>35);
.Ve
.SS "addGeoArc_rad"
.IX Subsection "addGeoArc_rad"
Method to add an arc to the graph.
.PP
.Vb 1
\&  $obj\->addGeoArc_rad(50=>25, 75=>35);
.Ve
.SS "addString"
.IX Subsection "addString"
Method to add a string to the graph.
.SS "addString_rad"
.IX Subsection "addString_rad"
Method to add a string to the graph.
.SS "addGeoString"
.IX Subsection "addGeoString"
Method to add a string to the graph.
.SS "addGeoString_rad"
.IX Subsection "addGeoString_rad"
Method to add a string to the graph.
.SH "Objects"
.IX Header "Objects"
.SS "gdimage"
.IX Subsection "gdimage"
Returns a \s-1GD\s0 object
.SS "gcnames"
.IX Subsection "gcnames"
Returns a Graphics::ColorNames object
.SH "Properties"
.IX Header "Properties"
.SS "color"
.IX Subsection "color"
Method to set or return the current drawing color
.PP
.Vb 3
\&  my $colorobj = $obj\->color("blue");     #if Graphics::ColorNames available
\&  my $colorobj = $obj\->color([77,82,68]); #rgb=>[decimal,decimal,decimal]
\&  my $colorobj = $obj\->color;
.Ve
.SS "font"
.IX Subsection "font"
Method to set or return the current drawing font (only needed by the very few)
.PP
.Vb 3
\&  use GD qw(gdGiantFont gdLargeFont gdMediumBoldFont gdSmallFont gdTinyFont);
\&  $obj\->font(gdSmallFont); #the default
\&  $obj\->font;
.Ve
.SS "size"
.IX Subsection "size"
Sets or returns the width and height of the graph in pixels.
.SS "radius"
.IX Subsection "radius"
Sets or returns the radius of the Graph
.SS "border"
.IX Subsection "border"
.SS "ticks"
.IX Subsection "ticks"
.SS "rgbfile"
.IX Subsection "rgbfile"
Sets or returns an \s-1RGB\s0 file.
.PP
Note: This method will search in a few locations for a file.
.SS "draw"
.IX Subsection "draw"
Method returns a \s-1PNG\s0 binary blob.
.PP
.Vb 1
\&  my $png_binary = $obj\->draw;
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
\&\s-1MIT\s0 License
.PP
Copyright (c) 2022 Michael R. Davis
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1GD\s0, Geo::Constants, Geo::Functions, Graphics::ColorNames
